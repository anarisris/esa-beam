#!/usr/bin/env python

import sys, os, argparse, datetime, stat, glob
import numpy as np
import re

# set up libradtran files
# assumes by default that loction of librdtran data files is in "."
# but overriden by LIBRADTRAN_PATH

def checkFile(fname):
	try:
		fp = open(fname, 'rw')
		return fp
	except IOError as e:
		# for 3.2 print("({})".format(e))
		# print("%s: ({0})".format(e)%(sys.argv[0]))
		print("({})".format(e))
		sys.exit(1)


def openFileIfNotExists(filename):
	# create if it doesn't exist, truncate of it does
	try:
		fd = os.open(filename, os.O_CREAT | os.O_EXCL | os.O_WRONLY | os.O_TRUNC)
	except:
		return None
	fobj = os.fdopen(fd,'w')
	return fobj

def defaultLRT(fp, solar_file, dens_column, correlated_k, rte_solver, rpvfile, deltam, nstr, zout, output_user, quiet):
	fp.write('solar_file ' + solar_file + '\n')
	fp.write('dens_column ' + dens_column)
	fp.write('correlated_k ' + correlated_k)
	fp.write('rte_solver ' + rte_solver)
	fp.write('rpv_file ' + rpvfile + '\n')
	fp.write('deltam ' + deltam)
	fp.write('nstr ' + nstr)
	fp.write('zout ' + zout)
	fp.write('output_user ' + output_user)
	fp.write(quiet)
	return


def main():

	# set up defaults
	LIBRADTRAN_PATH = '/data/geospatial_07/mdisney/ESA/3Dveglab/libRadtran-1.7/'
	ipfile = 'libradtran.ip'
	opfile = ipfile + '.op'
	opdir = 'libradtran'
	wbfile = 'wb.MSI.dat'
	anglefile = 'angles.MSI.dat'
	rpvfile = 'rpv.laegeren.libradtran.dat'
	root = 'libradtran'
	lat = False
	lon = False
	time = False
	dartFlag = True
	
	# default libradtran values
	solar = 'data/solar_flux/NewGuey2003.dat'
	dens_column = 'O3 300.\n'
	correlated_k = 'LOWTRAN\n'
	rte_solver = 'cdisort\n'
	deltam = 'on\n'
	nstr = '6\n'
	zout = 'TOA\n'
	output_user = 'lambda uu\n'
	quiet = 'quiet\n'
	plotfilefp = False	
	
	if options.lrtp: LIBRADTRAN_PATH = options.lrtp
	if options.ipfile: ipfile = options.ipfile
	if options.opfile: opfile = options.opfile
	if options.opdir: opdir = options.opdir
        if options.plotfile: plotfile = options.plotfile
	if options.wbfile: wbfile = options.wbfile
	if options.anglefile: anglefile = options.anglefile
	if options.rpvfile: rpvfile = options.rpvfile
	if options.lat: lat = options.lat
	if options.lon: lon = options.lon
	if options.time: time = options.time

        LIBRADTRAN = LIBRADTRAN_PATH + 'bin/uvspec'
	solar_file = LIBRADTRAN_PATH + solar 

	try:
		os.stat(opdir)
	except:
		os.mkdir(opdir)
	
	try:
		os.stat(LIBRADTRAN_PATH)
	except:
		sys.stderr.write("%s: cant find LIBRADTRAN_PATH dir %s\n"%(sys.argv[0],LIBRADTRAN_PATH))
		sys.exit([True])
	
	angfp = checkFile(anglefile)
	wbfp = checkFile(wbfile)
	rpvfp = checkFile(rpvfile)

	# only do this to check number of cols
	rpv = np.genfromtxt(rpvfile,unpack=True).transpose()
	if rpv.shape[1] != 4:
		sys.stderr.write("%s: rpv file %s wrong no. of cols (should be 4: lambda (nm), rho0, k, theta\n"%(sys.argv[0],rpvfile))
		sys.exit([True])
	
	angt = np.genfromtxt(anglefile,unpack=True).T
	wb = np.array(np.genfromtxt(wbfile,unpack=True).transpose())[:,1]
	
	nbands = wb.size
	# wbstep is 1nm as per solar input file
	wbstep = 1
	if options.v:
		sys.stderr.write('%s: wbmin = %i, wbmax = %i, wbstep = %i\n'%(sys.argv[0],wb.min(),wb.max(),wbstep))	
	
	if options.v:
		# only do all angles if time not specified, if time specified use that to get sza and phi0
		if lat and lon and time:
			sys.stderr.write("%s: doing lat lon time, not using sun angles in file %s\n"%(sys.argv[0],anglefile))
	
	# check for op file if required
	if not os.path.exists(plotfile):
		plotfilefp = openFileIfNotExists(plotfile)
	else:
		sys.stderr.write('%s: plotfile %s already exists - move/delete and re-run\n'%(sys.argv[0],plotfile))
		sys.exit(1)


	# loop over angles and do all wb at once for each angle
	for a, aa in enumerate(angt):

		# need special case for 1 angle only, in which case angt = 4
		if angt.size == 4:
			vzz = angt[0]
                	vaa = angt[1]
                	szz = angt[2]
                	saa = angt[3]
		else:

			# sz, saz generated by user-specified dates and times, lat, lon if that option given
			# AND: need to check angles that we are absolute i.e. no -ves
			vzz = angt[a][0]
			vaa = angt[a][1]
			szz = angt[a][2]
			saa = angt[a][3]

		umu = np.cos(np.deg2rad(vzz))
		angstr = str(vzz) + '_' + str(vaa) + '_'+ str(szz) + '_' + str(saa)

		libradtran_ip = os.path.join(opdir, 'ip.' + root + '.' + wbfile + '_' + angstr)
		libradtran_op = os.path.join(opdir, 'op.' + root + '.' + wbfile + '_' + angstr)

		if not os.path.exists(libradtran_ip):
			libradtranfp = openFileIfNotExists(libradtran_ip)
			defaultLRT(libradtranfp, solar_file, dens_column, correlated_k, rte_solver, rpvfile, deltam, nstr, zout, output_user, quiet)
			

			if options.v:
				sys.stderr.write('%s: doing ip file %s\n'%(sys.argv[0],libradtran_ip))

			#sort out zen/azimuth angles i.e. if vz is -ve
			if vzz < 0:
				# doesn't matter as we use umu from above anyway but ...
				vzz *= -1.

			if vaa < 0:
				vaa = 180. - vaa

			if szz < 0:
				szz *= -1.
			if saa < 0:
				saa = 180. - saa

			# add view angles
			libradtranfp.write('umu ' + np.str(umu).replace('[','').replace(']','').replace('\n','') + '\n')
			libradtranfp.write('phi ' + np.str(vaa).replace('[','').replace(']','').replace('\n','') + '\n')
	
			# add sz angles
			if lat and lon and time:
				libradtranfp.writelines('latitude ' + lat + '\n')
				libradtranfp.writelines('longitude ' + lon + '\n')
				libradtranfp.writelines('time ' + time + '\n')
			else:
				# print out sun angles
				libradtranfp.write('sza ' + np.str(szz).replace('[','').replace(']','').replace('\n','') + '\n')
				libradtranfp.write('phi0 ' + np.str(saa).replace('[','').replace(']','').replace('\n','') + '\n')

			# write out wavelengths i.e. min and max. Step is determined by step in solar file i.e. 1nm default
                        libradtranfp.write('wavelength ' + np.str(np.int(wb.min())) + ' ' + np.str(np.int(wb.max())) + '\n')
			libradtranfp.flush()

			cmd = LIBRADTRAN + ' < ' + libradtran_ip + ' > ' + libradtran_op

			if options.v:
				sys.stderr.write('%s: doing cmd %s\n'%(sys.argv[0],cmd))
				#sys.exit()

			# run the libradtran command
			os.system(cmd)
	
		# now check if a single angle (i.e. angt.size == 4 ) and if so, break out of loop
		if angt.size == 4 or (lat and lon and time): break

	# finish angle loop & srt out collating results into LUT file at end if required
	# write header line i.e. vz va sz sa wb_min -> wb_max
	plotfilefp.write('# vz va sz sa ' + np.str(np.arange(wb.min(),wb.max(),wbstep).tolist()).replace('[','').replace(']','').replace(',','').replace('\n','') + '\n')
	plotfilefp.flush()
	
	for f in glob.glob(os.path.join(opdir,'op.*')):
		vzz = f.split('_')[-4]
		vaa = f.split('_')[-3]
		szz = f.split('_')[-2]
		saa = f.split('_')[-1]
		d = np.genfromtxt(f,unpack=True)
		plotfilefp.write('%s %s %s %s '%(vzz,vaa,szz,saa))
		plotfilefp.write(np.str(d[1].tolist()).replace('[','').replace(']','').replace(',','').replace('\n','') + '\n')

	plotfilefp.flush()
	plotfilefp.close()

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("-libradtran_path", dest="lrtp", help="LIBRADTRAN_PATH")		
	parser.add_argument("-opdir", dest="opdir", help="opdir")		
	parser.add_argument("-ip", dest="ipfile", help="lrt ip file", metavar="FILE")
	parser.add_argument("-op", dest="opfile", help="lrt op file", metavar="FILE")
        parser.add_argument("-plot", dest="plotfile", help="plot file", metavar="FILE")
	parser.add_argument("-wbfile", dest="wbfile", help="wb file", metavar="FILE")
	parser.add_argument("-angles", dest="anglefile", help="angles file", metavar="FILE")
	parser.add_argument("-rpv", dest="rpvfile", help="rpv file", metavar="FILE")
	parser.add_argument("-v", action="store_true", help="verbose on")
	#parser.add_argument("-wbstep", dest="wbstep", help="wbstep")
	parser.add_argument("-lat", dest="lat", help="latitude")
	parser.add_argument("-lon", dest="lon", help="longitude")
	parser.add_argument("-time", dest="time", help="time YYYY MM DD HH MM SS")
	options = parser.parse_args()
	main()
