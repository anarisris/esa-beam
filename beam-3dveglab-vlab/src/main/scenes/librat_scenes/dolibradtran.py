#!/usr/bin/env python

import sys, os, argparse, datetime, stat
import numpy as np
import re


# set up libradtran files
# assumes by default that loction of librdtran data files is in "."
# but overriden by LIBRADTRAN_PATH

def checkFile(fname):
	try:
		fp = open(fname, 'rw')
		return fp
	except IOError as e:
		# for 3.2 print("({})".format(e))
		# print("%s: ({0})".format(e)%(sys.argv[0]))
		print("({})".format(e))
		sys.exit(1)


def openFileIfNotExists(filename):
	# create if it doesn't exist, truncate of it does
	try:
		fd = os.open(filename, os.O_CREAT | os.O_EXCL | os.O_WRONLY | os.O_TRUNC)
	except:
		return None
	fobj = os.fdopen(fd,'w')
	return fobj

def defaultLRT(fp, solar_file, dens_column, correlated_k, rte_solver, rpvfile, deltam, nstr, zout, output_user, quiet):
	fp.write('solar_file ' + solar_file + '\n')
	fp.write('dens_column ' + dens_column)
	fp.write('correlated_k ' + correlated_k)
	fp.write('rte_solver ' + rte_solver)
	fp.write('rpv_file ' + rpvfile + '\n')
	fp.write('deltam ' + deltam)
	fp.write('nstr ' + nstr)
	fp.write('zout ' + zout)
	fp.write('output_user ' + output_user)
	fp.write(quiet)
	return


def main():

	# set up defaults
	LIBRADTRAN_PATH = '/data/geospatial_07/mdisney/ESA/3Dveglab/libRadtran-1.7/'
	ipfile = 'libradtran.ip'
	opfile = ipfile + '.op'
	opdir = 'libradtran'
	wbfile = 'wb.MSI.dat'
	anglefile = 'angles.MSI.dat'
	rpvfile = 'rpv.laegeren.libradtran.dat'
	root = 'libradtran'
	lat = False
	lon = False
	time = False
	
	# default libradtran values
	solar = 'data/solar_flux/NewGuey2003.dat'
	dens_column = 'O3 300.\n'
	correlated_k = 'LOWTRAN\n'
	rte_solver = 'cdisort\n'
	deltam = 'on\n'
	nstr = '6\n'
	zout = 'TOA\n'
	output_user = 'lambda uu\n'
	quiet = 'quiet\n'
	
	if options.lrtp: LIBRADTRAN_PATH = options.lrtp
	if options.ipfile: ipfile = options.ipfile
	if options.opfile: opfile = options.opfile
	if options.opdir: opdir = options.opdir
        if options.plotfile: plotfile = options.plotfile
	if options.wbfile: wbfile = options.wbfile
	if options.anglefile: anglefile = options.anglefile
	if options.rpvfile: rpvfile = options.rpvfile
	if options.lat: lat = options.lat
	if options.lon: lon = options.lon
	if options.time: time = options.time

        LIBRADTRAN = LIBRADTRAN_PATH + 'bin/uvspec'
	solar_file = LIBRADTRAN_PATH + solar 

	try:
		os.stat(opdir)
	except:
		os.mkdir(opdir)
	
	try:
		os.stat(LIBRADTRAN_PATH)
	except:
		sys.stderr.write("%s: cant find LIBRADTRAN_PATH dir %s\n"%(sys.argv[0],LIBRADTRAN_PATH))
		sys.exit([True])
	
	angfp = checkFile(anglefile)
	wbfp = checkFile(wbfile)
	rpvfp = checkFile(rpvfile)
	

	# only do this to check number of cols
	rpv = np.genfromtxt(rpvfile,unpack=True).transpose()
	if rpv.shape[1] != 4:
		sys.stderr.write("%s: rpv file %s wrong no. of cols (should be 4: lambda (nm), rho0, k, theta\n"%(sys.argv[0],rpvfile))
		sys.exit([True])
	
	ang = np.genfromtxt(anglefile,unpack=True)
	wb = np.array(np.genfromtxt(wbfile,unpack=True).transpose())[:,1]
	
	if options.v:
		# only do all angles if time not specified, if time specified use that to get sza and phi0
		if lat and lon and time:
			sys.stderr.write("%s: doing lat lon time, not using sun angles in file %s\n"%(sys.argv[0],anglefile))
	
	
	# loop over wavebands, can do all vz, vaz angles in one go
	# sz, saz generated by user-specified dates and times, lat, lon
	vz = ang[0]
	va = np.unique(ang[1])
	umu = np.cos(np.deg2rad(vz))

	opdata = np.zeros((wb.shape[0],2))

	for n, w in enumerate(wb):
	
		libradtran_ip = os.path.join(opdir, 'ip.' + root + '_wb_' + str(w))
		libradtran_op = os.path.join(opdir, 'op.' + root + '_wb_' + str(w))
				
		# critical to see if it exists or not and only do the processing if it does
		if not os.path.exists(libradtran_ip):
			libradtranfp = openFileIfNotExists(libradtran_ip)
			defaultLRT(libradtranfp, solar_file, dens_column, correlated_k, rte_solver, rpvfile, deltam, nstr, zout, output_user, quiet)

			# add view angles
			libradtranfp.write('umu ' + np.str(umu).replace('[','').replace(']','').replace('\n','') + '\n')
			libradtranfp.write('phi ' + np.str(va).replace('[','').replace(']','').replace('\n','') + '\n')
	
			# add sz angles
			if lat and lon and time:
				libradtranfp.writelines('latitude ' + lat + '\n')
				libradtranfp.writelines('longitude ' + lon + '\n')
				libradtranfp.writelines('time ' + time + '\n')
			else:
				# print out sun angles
				sz = np.unique(ang[2])
				sa = np.unique(ang[3])
				libradtranfp.write('sza ' + np.str(sz).replace('[','').replace(']','').replace('\n','') + '\n')
				libradtranfp.write('phi0 ' + np.str(sa).replace('[','').replace(']','').replace('\n','') + '\n')

			libradtranfp.write('wavelength ' + np.str(w) + '\n')
			libradtranfp.flush()

			cmd = LIBRADTRAN + ' < ' + libradtran_ip + ' > ' + libradtran_op
			if options.v:
				sys.stderr.write('%s: doing cmd %s\n'%(sys.argv[0],cmd))
				#sys.exit()
			os.system(cmd)

			# sort out stuff at the end to plot?
			opdata[n] = np.genfromtxt(libradtran_op,unpack=True)

	if options.plotfile:
		if options.v:
			sys.stderr.write('%s: writing all results to %s\n'%(sys.argv[0],plotfile))
		np.savetxt(plotfile,opdata)

if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("-libradtran_path", dest="lrtp", help="LIBRADTRAN_PATH")		
	parser.add_argument("-opdir", dest="opdir", help="opdir")		
	parser.add_argument("-ip", dest="ipfile", help="lrt ip file", metavar="FILE")
	parser.add_argument("-op", dest="opfile", help="lrt op file", metavar="FILE")
        parser.add_argument("-plot", dest="plotfile", help="plot file", metavar="FILE")
	parser.add_argument("-wb", dest="wbfile", help="wb file", metavar="FILE")
	parser.add_argument("-angles", dest="anglefile", help="angles file", metavar="FILE")
	parser.add_argument("-rpv", dest="rpvfile", help="rpv file", metavar="FILE")
	parser.add_argument("-v", action="store_true", help="verbose on")
	parser.add_argument("-lat", dest="lat", help="latitude")
	parser.add_argument("-lon", dest="lon", help="longitude")
	parser.add_argument("-time", dest="time", help="time YYYY MM DD HH MM SS")
	options = parser.parse_args()
	main()
